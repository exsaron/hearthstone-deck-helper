# Generated by Django 4.0.4 on 2022-06-05 06:40

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Card',
            fields=[
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('name_en', models.CharField(max_length=255, null=True, verbose_name='Name')),
                ('name_ru', models.CharField(max_length=255, null=True, verbose_name='Name')),
                ('service_name', models.CharField(default='', max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='URL')),
                ('card_type', models.CharField(choices=[('', '---------'), ('M', 'Minion'), ('S', 'Spell'), ('H', 'Hero'), ('W', 'Weapon'), ('HP', 'Hero power')], default='', max_length=2, verbose_name='Type')),
                ('cost', models.SmallIntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Mana cost')),
                ('attack', models.SmallIntegerField(blank=True, default=0, help_text='For minions and weapons only.', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Attack')),
                ('health', models.SmallIntegerField(blank=True, default=0, help_text='For minions only.', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Health')),
                ('durability', models.SmallIntegerField(blank=True, default=0, help_text='For weapons only.', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Durability')),
                ('armor', models.SmallIntegerField(blank=True, default=0, help_text='For hero cards only.', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Armor')),
                ('text', models.TextField(blank=True, default='', help_text='The text of the card that defines its properties.', max_length=1000, verbose_name='Text')),
                ('text_en', models.TextField(blank=True, default='', help_text='The text of the card that defines its properties.', max_length=1000, null=True, verbose_name='Text')),
                ('text_ru', models.TextField(blank=True, default='', help_text='The text of the card that defines its properties.', max_length=1000, null=True, verbose_name='Text')),
                ('flavor', models.TextField(blank=True, default='', help_text='Free text.', max_length=1000, verbose_name='Flavor')),
                ('flavor_en', models.TextField(blank=True, default='', help_text='Free text.', max_length=1000, null=True, verbose_name='Flavor')),
                ('flavor_ru', models.TextField(blank=True, default='', help_text='Free text.', max_length=1000, null=True, verbose_name='Flavor')),
                ('rarity', models.CharField(choices=[('', '---------'), ('NO', 'No rarity'), ('C', 'Common'), ('R', 'Rare'), ('E', 'Epic'), ('L', 'Legendary')], default='', max_length=2, verbose_name='Rarity')),
                ('spell_school', models.CharField(blank=True, choices=[('', '---------'), ('H', 'Holy'), ('SH', 'Shadow'), ('N', 'Nature'), ('F', 'Fel'), ('FI', 'Fire'), ('FR', 'Frost'), ('A', 'Arcane')], default='', help_text='For spells only.', max_length=2, verbose_name='Spell school')),
                ('creation_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date of creation')),
                ('battlegrounds', models.BooleanField(default=False, verbose_name='Battlegrounds card')),
                ('mercenaries', models.BooleanField(default=False, verbose_name='Mercenaries card')),
                ('dbf_id', models.IntegerField(help_text='Integer ID of an existing card', primary_key=True, serialize=False, unique=True)),
                ('card_id', models.CharField(default='', help_text='String ID of an existing card', max_length=255)),
                ('artist', models.CharField(blank=True, max_length=255, verbose_name='Artist')),
                ('collectible', models.BooleanField(default=True, verbose_name='Collectible')),
                ('image_en', models.ImageField(blank=True, help_text='Rendered card image (en)', null=True, upload_to='cards/en/', verbose_name='Image (enUS)')),
                ('image_ru', models.ImageField(blank=True, help_text='Rendered card image (ru)', null=True, upload_to='cards/ru/', verbose_name='Image (ruRU)')),
                ('thumbnail', models.ImageField(blank=True, help_text='Card thumbnail to display in the deck', null=True, upload_to='cards/thumbnails/', verbose_name='Thumbnail')),
            ],
            options={
                'verbose_name': 'Hearthstone card',
                'verbose_name_plural': 'Hearthstone cards',
                'ordering': ['-cost'],
            },
        ),
        migrations.CreateModel(
            name='CardClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('name_en', models.CharField(max_length=255, null=True, verbose_name='Name')),
                ('name_ru', models.CharField(max_length=255, null=True, verbose_name='Name')),
                ('service_name', models.CharField(default='', help_text='(!)', max_length=255, unique=True, verbose_name='Service')),
                ('collectible', models.BooleanField(default=False, verbose_name='Collectible')),
                ('image', models.ImageField(blank=True, null=True, upload_to='classes/', verbose_name='Image')),
            ],
            options={
                'verbose_name': 'Class',
                'verbose_name_plural': 'Classes',
            },
        ),
        migrations.CreateModel(
            name='CardSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('name_en', models.CharField(max_length=255, null=True, verbose_name='Name')),
                ('name_ru', models.CharField(max_length=255, null=True, verbose_name='Name')),
                ('service_name', models.CharField(blank=True, default='', help_text='(!)', max_length=255, verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Set',
                'verbose_name_plural': 'Sets',
            },
        ),
        migrations.CreateModel(
            name='Mechanic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('name_en', models.CharField(max_length=255, null=True, verbose_name='Name')),
                ('name_ru', models.CharField(max_length=255, null=True, verbose_name='Name')),
                ('service_name', models.CharField(blank=True, default='', help_text='(!)', max_length=255, verbose_name='Service')),
                ('hidden', models.BooleanField(default=False, verbose_name='Hidden')),
            ],
            options={
                'verbose_name': 'Mechanic',
                'verbose_name_plural': 'Mechanics',
            },
        ),
        migrations.CreateModel(
            name='Tribe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('name_en', models.CharField(max_length=255, null=True, verbose_name='Name')),
                ('name_ru', models.CharField(max_length=255, null=True, verbose_name='Name')),
                ('service_name', models.CharField(default='', help_text='(!)', max_length=255, unique=True, verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Tribe',
                'verbose_name_plural': 'Tribes',
            },
        ),
    ]
